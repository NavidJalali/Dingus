package io.navidjalali.dingus

import java.time.format.DateTimeFormatter
import java.time.{Instant, ZoneOffset}

final case class Header(name: String, value: String)

object Header {
  def wwwAuthenticate(value: String): Header          = Header("WWW-Authenticate", value)
  def authorization(value: String): Header            = Header("Authorization", value)
  def basicAuthorization(credentials: String): Header = Header("Authorization", s"Basic $credentials")
  def proxyAuthenticate(value: String): Header        = Header("Proxy-Authenticate", value)
  def proxyAuthorization(value: String): Header       = Header("Proxy-Authorization", value)
  def age(seconds: Long): Header                      = Header("Age", seconds.toString)
  def cacheControl(value: CacheControl): Header       = Header("Cache-Control", value.render)
  def cacheControl(value: String): Header             = Header("Cache-Control", value)
  def clearSiteData(value: ClearSiteData): Header     = Header("Clear-Site-Data", value.render)
  def clearSiteData(value: String): Header            = Header("Clear-Site-Data", value)
  def expires(value: Instant): Header =
    Header("Expires", value.atOffset(ZoneOffset.UTC).format(DateTimeFormatter.RFC_1123_DATE_TIME))
  def pragmaNoCache: Header                           = Header("Pragma", "no-cache")
  def pragma(value: String): Header                   = Header("Pragma", value)
  def warning(value: String): Header                  = Header("Warning", value)
  def acceptClientHints(values: List[String]): Header = Header("Accept-CH", values.mkString(", "))
  def lastModified(value: Instant): Header =
    Header("Last-Modified", value.atOffset(ZoneOffset.UTC).format(DateTimeFormatter.RFC_1123_DATE_TIME))
  def ifModifiedSince(value: Instant): Header =
    Header("If-Modified-Since", value.atOffset(ZoneOffset.UTC).format(DateTimeFormatter.RFC_1123_DATE_TIME))
  def ifUnmodifiedSince(value: Instant): Header =
    Header("If-Unmodified-Since", value.atOffset(ZoneOffset.UTC).format(DateTimeFormatter.RFC_1123_DATE_TIME))
  def eTag(value: String): Header                          = Header("ETag", s"\"$value\"")
  def eTagWeak(value: String): Header                      = Header("ETag", s"W/\"$value\"")
  def eTag(value: ETag): Header                            = Header("ETag", value.render)
  def ifNoneMatch(value: String): Header                   = Header("If-None-Match", value)
  def ifNoneMatch(value: ETagMatch): Header                = Header("If-None-Match", value.render)
  def ifMatch(value: String): Header                       = Header("If-Match", value)
  def ifMatch(value: ETagMatch): Header                    = Header("If-Match", value.render)
  def vary(value: String): Header                          = Header("Vary", value)
  def connection(value: String): Header                    = Header("Connection", value)
  def keepAlive(value: String): Header                     = Header("Keep-Alive", value)
  def accept(value: String): Header                        = Header("Accept", value)
  def acceptEncoding(value: String): Header                = Header("Accept-Encoding", value)
  def acceptLanguage(value: String): Header                = Header("Accept-Language", value)
  def expect(value: String): Header                        = Header("Expect", value)
  def cookie(value: String): Header                        = Header("Cookie", value)
  def cookie(x: Cookie, xs: Cookie*): Header               = Header("Cookie", (x +: xs).map(_.render).mkString("; "))
  def cookie(value: List[Cookie]): Header                  = Header("Cookie", value.map(_.render).mkString("; "))
  def setCookie(value: String): Header                     = Header("Set-Cookie", value)
  def accessControlAllowOrigin(value: String): Header      = Header("Access-Control-Allow-Origin", value)
  def accessControlAllowCredentials(value: String): Header = Header("Access-Control-Allow-Credentials", value)
  def accessControlAllowHeaders(value: String): Header     = Header("Access-Control-Allow-Headers", value)
  def accessControlAllowMethods(value: String): Header     = Header("Access-Control-Allow-Methods", value)
  def accessControlExposeHeaders(value: String): Header    = Header("Access-Control-Expose-Headers", value)
  def accessControlMaxAge(value: String): Header           = Header("Access-Control-Max-Age", value)
  def accessControlRequestHeaders(value: String): Header   = Header("Access-Control-Request-Headers", value)
  def accessControlRequestMethod(value: String): Header    = Header("Access-Control-Request-Method", value)
  def origin(value: String): Header                        = Header("Origin", value)
  def timingAllowOrigin(value: String): Header             = Header("Timing-Allow-Origin", value)
  def contentDisposition(value: String): Header            = Header("Content-Disposition", value)
  def contentLength(value: Long): Header                   = Header("Content-Length", value.toString)
  def contentType(value: String): Header                   = Header("Content-Type", value)
  def contentTypeJson: Header                              = Header("Content-Type", "application/json")
  def contentEncoding(value: String): Header               = Header("Content-Encoding", value)
  def contentLanguage(value: String): Header               = Header("Content-Language", value)
  def contentLocation(value: String): Header               = Header("Content-Location", value)
  def forwarded(value: String): Header                     = Header("Forwarded", value)
  def xForwardedFor(value: String): Header                 = Header("X-Forwarded-For", value)
  def xForwardedHost(value: String): Header                = Header("X-Forwarded-Host", value)
  def xForwardedProto(value: String): Header               = Header("X-Forwarded-Proto", value)
  def via(value: String): Header                           = Header("Via", value)
  def location(value: String): Header                      = Header("Location", value)
  def host(value: String): Header                          = Header("Host", value)
  def from(value: String): Header                          = Header("From", value)
  def referer(value: String): Header                       = Header("Referer", value)
  def refererPolicy(value: String): Header                 = Header("Referrer-Policy", value)
  def userAgent(value: String): Header                     = Header("User-Agent", value)
  def allow(value: String): Header                         = Header("Allow", value)
  def allow(value: HttpMethod, value2: HttpMethod*): Header =
    Header("Allow", (value +: value2).map(_.toString).mkString(", "))
  def server(value: String): Header           = Header("Server", value)
  def acceptRanges(value: String): Header     = Header("Accept-Ranges", value)
  def range(value: String): Header            = Header("Range", value)
  def contentRange(value: String): Header     = Header("Content-Range", value)
  def ifRange(value: String): Header          = Header("If-Range", value)
  def transferEncoding(value: String): Header = Header("Transfer-Encoding", value)
  def transferEncoding(x: TransferEncoding, xs: TransferEncoding*): Header =
    Header("Transfer-Encoding", (x +: xs).map(_.render).mkString(", "))
  def te(value: String): Header   = Header("TE", value)
  def link(value: String): Header = Header("Link", value)
}
